---
title: "The FIFA World Cup"
subtitle: "A recreation of Tanya Shapiro's Dataviz"

author: 
- name: "Matthew Kuch"
  email: kuch.matthew@gmail.com
date: 11/23/2024

title-block-banner: "#f0f3f5"
title-block-banner-color: "black"

format: html
html:
code-fold: false
code-summary: "Code"
css: style.css
toc: true
toc-location: left
number-sections: true
editor: visual
fig-cap-location: margin
---

This tutorial will walk you through in detail how to recreate Tanya Shapiro's visualization below.

**I hope you enjoy this because at each stage of recreating this dataviz is like solving a puzzle!**

![The goal is to recreate this](./assets/fifa.png)

We're going to re-engineer the above dataviz in 6 steps:

1.  Load the required libraries
2.  Setup the nice looking fonts
3.  Webscraping wikipedia (for the FIFA world cup data)
4.  Data wrangling and transformation (final step before visualization)
5.  Create the heatmap and polish it
6.  Add text and annotations

# Load the required libraries

To accomplish the 6 steps above, the libraries that will help us are below :

i.  **Data manipulation and visualization**: tidyverse, RColorBrewer, viridis

ii. **Fonts and text customization**: sysfonts, showtext

iii. **Specialized ggplot features**: geomtextpath, ggimage, ggtext

iv. **Webscraping:** rvest

v.  **Creating data tables:** DT

```{r warning=FALSE, message=FALSE}

library(tidyverse)
library(RColorBrewer)
library(viridis)
library(sysfonts)
library(showtext)
library(geomtextpath)
library(ggimage)
library(ggtext)
library(rvest)
library(DT)

```

# Setup the nice looking fonts

The custom fonts we'll use for different parts of the visualization are as follows:

-   The main text font is **Roboto** (downloaded via Google Fonts).

-   The title font is **Cocon**, which resembles FIFA branding.

-   The caption uses **Font Awesome** for social media icons.

```{r}

sysfonts::font_add_google("Roboto", "Roboto")
sysfonts::font_add("Cocon", "./fonts/CoconRegularFont.otf")
sysfonts::font_add("fb", "fonts/Font Awesome 6 Brands-Regular-400.otf")
showtext_auto()
showtext::showtext_opts(dpi = 300)

```

# Webscraping wikipedia (for the FIFA world cup data)

Now to the fun stuff, lets retrieve FIFA World Cup data from Wikipedia, using the rvest package for web scraping. The goal is to extract relevant tables from the Wikipedia pages for each tournament year.

![URL for 1982 FIFA World Cup](assets/fifa-wiki-1982-url.jpg){fig-align="center"}

## Setting up a reference table

The reference table (`ref`) contains the following:

-   **`year`**: The years of the FIFA World Cup (1982â€“2018 in this example).

-   **`index`**: The position of the table on each year's Wikipedia page.

-   **`host`**: The country that hosted the tournament in each year.

-   **`link`**: The URL to the Wikipedia page for each year's tournament.

```{r}

ref = data.frame(
    year = c(1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014),
    index = c(16, 14, 15, 13, 25, 24, 23, 14, 20),
    host = c("Spain", "Mexico", "Italy", "United States", "France",
             "South Korea", "Germany", "South Africa", "Brazil")
)

# Generate links to all Wikipedia pages for these years
ref$link = paste0("https://en.wikipedia.org/wiki/", ref$year, "_FIFA_World_Cup")

# Visualize the reference table 
datatable(ref, filter = "top")

```

This ref table acts as a roadmap for the scraping function, specifying the exact URL and table position for each year.

## Lets first get 1 table for 1982, as a test case

To test our web-scraping logic, lets first scrape the 1982 table:

```{r}

# Step 1: Get the URL and table index for the year 1982
  url = ref$link[ref$year == 1982]
  index = ref$index[ref$year == 1982]
  
  # Step 2: Scrape the table from the Wikipedia page
  data_1982 = url %>%
    read_html() %>%                    # Read the HTML content of the page
    html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
    .[index] %>%                       # Pick the table based on the given index
    html_table() %>%                   # Convert the table to a dataframe
    .[[1]]                             # Extract the first element of the list

  
# Step 3: Clean and format the table
  data_1982 = data_1982 %>%
    rename(Pos = 1) %>%                # Rename the first column to 'Pos' (Position)
    select(Pos, Team, L, W)            # Keep only Position, Team, Losses, and Wins columns
  
# Visualization the 1982 data table
  
datatable(data_1982, filter = "top")

```

## Helper Function: `get_table()`

The function `get_table(year)` will perform the following steps:

-   Retrieves the appropriate URL and table index for a given `year`.

-   Scrapes the specified table from the Wikipedia page.

-   Renames and selects the required columns: **Position (`Pos`)**, **Team**, **Losses (`L`)**, and **Wins (`W`)**.

-   Adds the `year` column to identify the tournament.

```{r}

get_table <- function(year) {
  # Step 1: Get the URL and table index for the year
  url = ref$link[ref$year == year]
  index = ref$index[ref$year == year]
  
  # Step 2: Scrape the table from the Wikipedia page
  data = url %>%
    read_html() %>%                    # Read the HTML content of the page
    html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
    .[index] %>%                       # Pick the table based on the given index
    html_table() %>%                   # Convert the table to a dataframe
    .[[1]]                             # Extract the first element of the list
  
  # Step 3: Clean and format the table
  data = data %>%
    rename(Pos = 1) %>%                # Rename the first column to 'Pos' (Position)
    select(Pos, Team, L, W)            # Keep only Position, Team, Losses, and Wins columns
  
  # Step 4: Add the year column
  data$year = year
  
  return(data)
}

```

**Explanation of key steps**:

-   **Scraping with `read_html` and `html_elements`:** Reads the webpage and selects all tables with the `wikitable` CSS class (a standard for tables on Wikipedia).

-   **Indexing with `.[index]`:** Extracts the specific table based on the `index` column in the `ref` table.

-   **Converting the table with `html_table`:** Converts the HTML table into a tidy dataframe.

-   **Column selection and renaming:** Cleans the scraped table by renaming and selecting only the required columns.

## Loop through all the years

The script below loops through all years in `ref$year`, applying `get_table()` to each year. The results are combined into a single dataframe (`data`).

```{r}
# Initialize an empty dataframe
data = data.frame()

# Loop through each year and scrape the corresponding data
for (i in ref$year) {
  data = rbind(data, get_table(i))
}

# Visualize data table
datatable(data, filter = "top")
 

```

## Post scraping data cleaning

### **Standardize Team Names**:

-   West Germany is relabeled as Germany for consistency.

```{r}
data <- data %>%
  mutate(Team = case_when(Team == "West Germany" ~ "Germany", TRUE ~ Team))

```

### **Filter Frequent Participants**:

-   Only keep teams that participated in at least 4 tournaments.

```{r}
teams <- data %>%
  group_by(Team) %>%
  summarise(wc = n()) %>%
  filter(wc > 3)

# Visualize teams
datatable(teams, filter = "top")
```

**Purpose**:

-   This ensures the visualization focuses on teams with a significant history in the World Cup

### Group by geographic region

```{r}

geo_group <- data.frame(
  country = c("Italy","Germany","England","Norway","Sweden","Switzerland","Netherlands","France","Belgium",
              "Spain","Croatia","Poland","Portugal","Denmark","Russia","Scotland",
              "United States","Argentina","Brazil","Paraguay","Uruguay","Costa Rica","Colombia","Chile","Mexico",
              "Nigeria","Cameroon","Saudi Arabia","South Korea","Japan","Iran","Morocco","Algeria"
  ),
  geo = c(rep("Europe",16), rep("Americas",9), rep("Other",8))
)

#Create Factor for Continent to arrange in order
geo_group$geo<-factor(geo_group$geo, levels=c("Europe","Americas","Other"))

# Visualize geo grouping table
datatable(geo_group, filter = "top")
```

The `geo_group` dataframe is created to group the countries (teams) into geographic regions (e.g., Europe, Americas, Other). These groupings will later be used to:

1.  **Color-code** teams by region.

2.  **Create section labels in the visualization** (e.g., "Europe", "Americas", "Other").

# Data wrangling and transformation

## Prepare the data for plotting

```{r}

df_plot <- data %>%
  filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
  left_join(teams, by = "Team") %>%
  left_join(geo_group, by = c("Team" = "country")) %>%
  left_join(ref, by = "year") %>%
  group_by(year) %>%
  complete(Team = teams$Team) %>%
  filter(!grepl("Eliminated", Team)) %>%
  mutate(counter = 1,
         Pos = as.integer(Pos),
         group = case_when(
           is.na(Pos) ~ "Not Present",
           Pos == 1 ~ "Win",
           Pos <= 4 ~ "Semi Finals",
           Pos <= 8 ~ "Quarter Finals",
           Pos <= 16 ~ "Round of 16",
           Pos <= 32 ~ "Group Stage"
         )) %>%
  ungroup() %>%
  group_by(Team) %>%
  arrange(Team, year) %>%
  mutate(wc = sum(counter[group != "Not Present"]),
         win = sum(counter[group == "Win"])) %>%
  arrange(geo, -wc, -win, Team) %>%
  ungroup()

# Visualize
datatable(df_plot, filter = "top")
```

### Detailed explanation of the above code snippet for df_plot

#### Filter Relevant Data

```{r}

# filter(!grepl("Eliminated", Pos) & Team %in% teams$Team)

```

**Purpose**: Exclude irrelevant rows from the data.

-   `!grepl("Eliminated", Pos)`: Removes rows where the position (`Pos`) contains the word "Eliminated".

-   `Team %in% teams$Team`: Keeps only teams that participated in more than 3 tournaments (filtered earlier in `teams`).

#### Join Additional Data

```{r}

# left_join(teams, by = "Team") %>%
# left_join(geo_group, by = c("Team" = "country")) %>%
# left_join(ref, by = "year")

```

**Purpose**: Merge additional information into the main dataframe.

-   `teams`: Adds the number of World Cups each team participated in (`wc`).

-   `geo_group`: Adds geographic groupings (e.g., Europe, Americas).

-   `ref`: Adds metadata like the tournament's host country and year.

#### Group and Ensure All Teams Appear Each Year

```{r}
# group_by(year) %>% complete(Team = teams$Team)

```

**Purpose**: Ensure every team that meets the criteria (`teams$Team`) is listed for every tournament year, even if they didn't participate.

-   `complete(Team = teams$Team)`: Adds missing rows for teams not present in certain years, filling them with `NA`.

#### Filter Out Invalid Teams

```{r}

# filter(!grepl("Eliminated", Team))

```

**Purpose**: Removes any false rows where `Team` is incorrectly filled with "Eliminated" or similar.

#### Add New Columns

```{r}

# mutate(counter = 1,
       #Pos = as.integer(Pos),
       #group = case_when(
         #is.na(Pos) ~ "Not Present",
         #Pos == 1 ~ "Win",
         #Pos <= 4 ~ "Semi Finals",
         #Pos <= 8 ~ "Quarter Finals",
         #Pos <= 16 ~ "Round of 16",
         #Pos <= 32 ~ "Group Stage"
       #))

```

**Purpose**: Create additional columns for further analysis and visualization.

-   `counter = 1`: Adds a simple counter for each row, used to calculate summaries later.

-   `Pos = as.integer(Pos)`: Converts `Pos` to an integer for easier comparisons.

-   `group`: Categorizes teams into performance groups:

    -   `is.na(Pos)`: If `Pos` is `NA`, the team did not participate (`"Not Present"`).

    -   `Pos == 1`: Winner (`"Win"`).

    -   `Pos <= 4`: Reached the semifinals (`"Semi Finals"`).

    -   `Pos <= 8`: Reached the quarterfinals (`"Quarter Finals"`).

    -   `Pos <= 16`: Reached the round of 16 (`"Round of 16"`).

    -   `Pos <= 32`: Played in the group stage (`"Group Stage"`).

#### Summarize Performance by Team

```{r}

# group_by(Team) %>%
# arrange(Team, year) %>%
# mutate(wc = sum(counter[group != "Not Present"]),
       # win = sum(counter[group == "Win"]))

```

**Purpose**: Calculate aggregate statistics for each team.

-   `wc`: Total number of tournaments the team participated in (excludes `"Not Present"` years).

-   `win`: Total number of tournaments won by the team.

#### Sort Data

```{r}

# arrange(geo, -wc, -win, Team)

```

**Purpose**: Organize the dataset for visualization.

-   `geo`: Groups teams by geographic region (Europe, Americas, Other).

-   `-wc`: Within each group, sort teams by the number of tournaments participated in, in descending order.

-   `-win`: Further sort teams by the number of wins, in descending order.

-   `Team`: Finally, sort alphabetically by team name.

#### Ungroup

```{r}

# ungroup()

```

**Purpose**: Remove grouping structure so that subsequent operations can work on the entire dataframe

## Pre-visualization positioning of teams on y-axis and assigning accessible color palettes, plus other adjustments

### Create Unique Y Positions

```{r}

df_pos <- df_plot |> 
  distinct(Team) |> 
  mutate(y_pos = row_number())

datatable(df_pos, filter = "top")
```

#### What This Does:

-   **`distinct(Team)`**:

    -   Extracts a unique list of all teams from the `df_plot` dataframe.

    -   This ensures that each team appears only once in the resulting `df_pos` dataframe.

-   **`mutate(y_pos = row_number())`**:

    -   Assigns a unique numeric value (`row_number()`) to each team. This value will determine the team's vertical position (`y_pos`) on the heatmap.

### Merge the Y Positions Back to the Main Dataset

```{r}

df_plot <- df_plot |> 
  left_join(df_pos, by = "Team")

datatable(df_plot, filter = "top")
```

#### What This Does:

-   **`left_join(df_pos, by = "Team")`**:

    -   Combines the `df_pos` dataframe (which contains the unique `y_pos` values) back into the original `df_plot` dataframe.

    -   For each row in `df_plot`, it looks up the corresponding `y_pos` based on the `Team` column and adds it.

#### Why This Is Needed:

-   This step ensures that every row in `df_plot` (which contains multiple entries per team for each World Cup year) now includes the `y_pos` value to determine its vertical position in the heatmap.

### Adjust Y Positions for Spacing Between Geographic Groups

```{r}

df_plot$y_pos <- ifelse(df_plot$y_pos < 16, df_plot$y_pos, df_plot$y_pos + 1)
df_plot$y_pos <- ifelse(df_plot$y_pos < 26, df_plot$y_pos, df_plot$y_pos + 1)

```

#### What This Does:

-   Adds blank space between different geographic regions (e.g., Europe, Americas, Other) in the heatmap.

-   **How It Works**:

    -   `ifelse(condition, value_if_true, value_if_false)` checks a condition and applies the appropriate value for each row.

    -   The logic:

        -   If `y_pos < 16`, leave it unchanged (`df_plot$y_pos` remains the same).

        -   Otherwise, increase the `y_pos` value by 1.

        -   Repeat the process for `y_pos < 26` to introduce additional spacing.

#### Why This Is Needed:

-   Creates visual separation between teams from different geographic groups in the heatmap.

### Create a Factor for Achievement Groups

```{r}

df_plot$group <- factor(df_plot$group, 
                        levels = c("Not Present", "Group Stage", "Round of 16", "Quarter Finals", "Semi Finals", "Win"))

```

#### What This Does:

-   Converts the `group` column (team performance categories) into an **ordered factor** with the specified levels.

#### Why This Is Needed:

-   Factors in R allow you to define the order of categories explicitly.

-   By ordering the levels, the heatmap will display the groups (e.g., "Not Present", "Group Stage") in a consistent order, instead of defaulting to alphabetical order.

#### Levels Explanation:

The performance levels are arranged from lowest to highest:

1.  `"Not Present"`: Team did not participate.

2.  `"Group Stage"`: Team was eliminated in the group stage.

3.  `"Round of 16"`: Team reached the round of 16.

4.  `"Quarter Finals"`: Team reached the quarterfinals.

5.  `"Semi Finals"`: Team reached the semifinals.

6.  `"Win"`: Team won the tournament.

### Define a Color Palette

```{r}

pal <- viridis(n = 5, option = "viridis")[1:5]

```

#### What This Does:

-   **`viridis(n = 5, option = "viridis")`**:

    -   Generates a set of 5 colors using the `viridis` color palette, which is known for being visually appealing and colorblind-friendly.

    -   The colors are used to represent different achievement levels in the heatmap.

-   **`[1:5]`**:

    -   Selects the first 5 colors from the palette.

#### Why This Is Needed:

-   The `pal` object will be used later in the `scale_fill_manual()` function to map performance groups to specific colors.

### Manually Adjust for 2002 (South Korea and Japan Hosting)

```{r}
df_plot$host[df_plot$Team == "Japan" & df_plot$year == 2002] <- "Japan"

```

#### What This Does:

-   **Purpose**: Corrects the `host` column for the year 2002, where both South Korea and Japan co-hosted the tournament.

-   **Logic**:

    -   Filters rows where `Team == "Japan"` and `year == 2002`.

    -   Sets the `host` value for those rows to `"Japan"`.

#### Why This Is Needed:

-   In 2002, South Korea and Japan were co-hosts, which is unusual for the World Cup. By default, the data may have assigned hosting to South Korea only, so this step ensures that Japan is also correctly marked as a host.

# Create the heatmap and polish it

```{r}

plot <- ggplot(data = df_plot, mapping = aes(x = as.character(year), y = y_pos, fill = group)) +
  geom_tile(color = "white", width = 0.9, height = 0.9) +
  geom_point(inherit.aes = FALSE, 
             data = df_plot %>% filter(Team == host), 
             mapping = aes(x = as.character(year), y = y_pos), 
             shape = 21, fill = "white", color = "grey20", size = 3) +
  annotate(geom = "text", x = "2006", y = -0.5, label = "Hosted", family = "Roboto", size = 2.75) +
  geom_segment(mapping = aes(x = "2006", xend = "2006", y = -0.1, yend = 0.85), 
               linewidth = 0.1, arrow = arrow(length = unit(0.05, "in"))) +
  geom_text(mapping = aes(label = Team, y = y_pos, x = -5), size = 3, hjust = 0, color = "#909090", family = "Roboto") +
  geomtextpath::geom_textsegment(mapping = aes(label = "Europe", x = -6, xend = -6, y = 15, yend = 1), family = "Roboto", fontface = "bold") +
  geomtextpath::geom_textsegment(mapping = aes(label = "Americas", x = -6, xend = -6, y = 25, yend = 17), family = "Roboto", fontface = "bold") +
  geomtextpath::geom_textsegment(mapping = aes(label = "Other", x = -6, xend = -6, y = 36, yend = 27), family = "Roboto", fontface = "bold") +
  scale_x_discrete(breaks = as.character(unique(df_plot$year)), 
                   expand = expansion(mult = c(1.5, 0.1), add = c(1, 1))) +
  scale_y_reverse(breaks = seq(0, 36, by = 1), limits = c(37.2, -2), expand = c(0, 0)) +
  scale_fill_manual(values = c("grey90", pal), 
                    guide = guide_legend(ncol = 1, override.aes = list(width = 0.6, height = 0.6))) +
  coord_equal() +
  labs(x = "", y = "", fill = "Top Achievement") +
  theme_void() +
  theme(text = element_text(family = "Roboto"),
        plot.title = element_text(face = "bold"),
        legend.position = "none",
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 8, angle = 90, family = "Roboto"),
        axis.ticks = element_blank(),
        panel.background = element_blank())
plot
```

The code above creates an initial heatmap that looks almost fully baked, but needs a few more tweaks.

## Detailed Heatmap plot explanation

Before we do the additional tweaking, lets walkthrough what each chunk of code above is doing - layer by layer.

### Initial Plot

```{r}

# ggplot(data = df_plot, mapping = aes(x = as.character(year), y = y_pos, fill = group))

```

-   **Purpose**: Sets up the base layer of the plot.

    -   **`data = df_plot`**: Uses the pre-processed dataset **`df_plot`** for plotting.

    -   **`aes(x = as.character(year), y = y_pos, fill = group)`**: Maps the following:

        -   **`x`**: Years of the FIFA tournaments (converted to character to ensure proper categorical spacing).

        -   **`y`**: Vertical position of each team (**`y_pos`**), which was calculated earlier to ensure unique spacing.

        -   **`fill`**: The performance group of the team (e.g., "Win", "Quarter Finals").

### Add Heatmap Tiles

```{r}

# geom_tile(color = "white", width = 0.9, height = 0.9)

```

-   **Purpose**: Creates the heatmap by drawing tiles.

    -   **`color = "white"`**: Sets the border color of each tile.

    -   **`width = 0.9, height = 0.9`**: Controls the size of each tile (slightly smaller than full size to leave spacing between tiles).

### Add Points for Host Countries

```{r}
# geom_point(inherit.aes = FALSE, 
           # data = df_plot %>% filter(Team == host), 
           # mapping = aes(x = as.character(year), y = y_pos), 
           # shape = 21, fill = "white", color = "grey20", size = 3)

```

-   **Purpose**: Adds circular points to indicate the host country for each year.

    -   **`inherit.aes = FALSE`**: Prevents this layer from inheriting the default aesthetics from **`ggplot`**.

    -   **`data = df_plot %>% filter(Team == host)`**: Filters the data to only include the host teams for each year.

    -   **`aes(x = as.character(year), y = y_pos)`**: Places the points in the corresponding year and **`y_pos`** of the host country.

    -   **`shape = 21`**: Creates a circular shape.

    -   **`fill = "white"`** and **`color = "grey20"`**: Makes the circle white with a dark grey outline.

    -   **`size = 3`**: Sets the size of the points.

### Annotated Host Text

```{r}
# annotate(geom = "text", x = "2006", y = -0.5, label = "Hosted", family = "Roboto", size = 2.75)

```

-   **Purpose**: Adds the "Hosted" label to the plot.

    -   **`geom = "text"`**: Specifies that the annotation is text.

    -   **`x = "2006", y = -0.5`**: Places the text below the 2006 column.

    -   **`label = "Hosted"`**: Specifies the text to display.

    -   **`family = "Roboto"`**: Sets the font family for the text.

    -   **`size = 2.75`**: Adjusts the font size.

### Add an arrow

```{r warning=FALSE, message=FALSE}
# geom_segment(mapping = aes(x = "2006", xend = "2006", y = -0.1, yend = 0.85), 
             #linewidth = 0.1, arrow = arrow(length = unit(0.05, "in")))

```

-   **Purpose**: Adds a vertical arrow pointing to the "Hosted" annotation.

    -   **`x = "2006", xend = "2006"`**: Starts and ends at the 2006 column.

    -   **`y = -0.1, yend = 0.85`**: Specifies the start and end positions of the arrow.

    -   **`size = 0.1`**: Sets the thickness of the arrow.

    -   **`arrow = arrow(...)`**: Draws the arrowhead.

Lets continue from here tomorrow...
