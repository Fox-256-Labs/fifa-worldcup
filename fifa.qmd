---
title: "The FIFA World Cup"
subtitle: "A recreation of Tanya Shapiro's Dataviz"

author: 
- name: "Matthew Kuch"
  email: kuch.matthew@gmail.com
date: 11/23/2024

title-block-banner: "#f0f3f5"
title-block-banner-color: "black"

format: html
html:
code-fold: false
code-summary: "Code"
css: style.css
toc: true
toc-location: left
number-sections: true
editor: visual
fig-cap-location: margin
---

This tutorial will walk you through in detail how to recreate Tanya Shapiro's visualization below.

**I hope you enjoy this because at each stage of recreating this dataviz is like solving a puzzle!**

![The goal is to recreate this](./assets/fifa.png)

We're going to re-engineer the above dataviz in 6 steps:

1.  Load the required libraries
2.  Setup the nice looking fonts
3.  Webscraping wikipedia (for the FIFA world cup data)
4.  Data wrangling and transformation (final step before visualization)
5.  Create the heatmap and polish it
6.  Add text and annotations

# Load the required libraries

To accomplish the 6 steps above, the libraries that will help us are below :

i.  **Data manipulation and visualization**: tidyverse, RColorBrewer, viridis

ii. **Fonts and text customization**: sysfonts, showtext

iii. **Specialized ggplot features**: geomtextpath, ggimage, ggtext

iv. **Webscraping:** rvest

v.  **Creating data tables:** DT

```{r warning=FALSE, message=FALSE}

library(tidyverse)
library(RColorBrewer)
library(viridis)
library(sysfonts)
library(showtext)
library(geomtextpath)
library(ggimage)
library(ggtext)
library(rvest)
library(DT)

```

# Setup the nice looking fonts

The custom fonts we'll use for different parts of the visualization are as follows:

-   The main text font is **Roboto** (downloaded via Google Fonts).

-   The title font is **Cocon**, which resembles FIFA branding.

-   The caption uses **Font Awesome** for social media icons.

```{r}

sysfonts::font_add_google("Roboto", "Roboto")
sysfonts::font_add("Cocon", "./fonts/CoconRegularFont.otf")
sysfonts::font_add("fb", "fonts/Font Awesome 6 Brands-Regular-400.otf")
showtext_auto()
showtext::showtext_opts(dpi = 300)

```

# Webscraping wikipedia (for the FIFA world cup data)

Now to the fun stuff, lets retrieve FIFA World Cup data from Wikipedia, using the rvest package for web scraping. The goal is to extract relevant tables from the Wikipedia pages for each tournament year.

![URL for 1982 FIFA World Cup](assets/fifa-wiki-1982-url.jpg){fig-align="center"}

## Setting up a reference table

The reference table (`ref`) contains the following:

-   **`year`**: The years of the FIFA World Cup (1982â€“2018 in this example).

-   **`index`**: The position of the table on each year's Wikipedia page.

-   **`host`**: The country that hosted the tournament in each year.

-   **`link`**: The URL to the Wikipedia page for each year's tournament.

```{r}

ref = data.frame(
    year = c(1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014),
    index = c(16, 14, 15, 13, 25, 24, 23, 14, 20),
    host = c("Spain", "Mexico", "Italy", "United States", "France",
             "South Korea", "Germany", "South Africa", "Brazil")
)

# Generate links to all Wikipedia pages for these years
ref$link = paste0("https://en.wikipedia.org/wiki/", ref$year, "_FIFA_World_Cup")

# Visualize the reference table 
datatable(ref, filter = "top")

```

This ref table acts as a roadmap for the scraping function, specifying the exact URL and table position for each year.

## Lets first get 1 table for 1982, as a test case

To test our web-scraping logic, lets first scrape the 1982 table:

```{r}

# Step 1: Get the URL and table index for the year 1982
  url = ref$link[ref$year == 1982]
  index = ref$index[ref$year == 1982]
  
  # Step 2: Scrape the table from the Wikipedia page
  data_1982 = url %>%
    read_html() %>%                    # Read the HTML content of the page
    html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
    .[index] %>%                       # Pick the table based on the given index
    html_table() %>%                   # Convert the table to a dataframe
    .[[1]]                             # Extract the first element of the list

  
# Step 3: Clean and format the table
  data_1982 = data_1982 %>%
    rename(Pos = 1) %>%                # Rename the first column to 'Pos' (Position)
    select(Pos, Team, L, W)            # Keep only Position, Team, Losses, and Wins columns
  
# Visualization the 1982 data table
  
datatable(data_1982, filter = "top")

```

## Helper Function: `get_table()`

The function `get_table(year)` will perform the following steps:

-   Retrieves the appropriate URL and table index for a given `year`.

-   Scrapes the specified table from the Wikipedia page.

-   Renames and selects the required columns: **Position (`Pos`)**, **Team**, **Losses (`L`)**, and **Wins (`W`)**.

-   Adds the `year` column to identify the tournament.

```{r}

get_table <- function(year) {
  # Step 1: Get the URL and table index for the year
  url = ref$link[ref$year == year]
  index = ref$index[ref$year == year]
  
  # Step 2: Scrape the table from the Wikipedia page
  data = url %>%
    read_html() %>%                    # Read the HTML content of the page
    html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
    .[index] %>%                       # Pick the table based on the given index
    html_table() %>%                   # Convert the table to a dataframe
    .[[1]]                             # Extract the first element of the list
  
  # Step 3: Clean and format the table
  data = data %>%
    rename(Pos = 1) %>%                # Rename the first column to 'Pos' (Position)
    select(Pos, Team, L, W)            # Keep only Position, Team, Losses, and Wins columns
  
  # Step 4: Add the year column
  data$year = year
  
  return(data)
}

```

**Explanation of key steps**:

-   **Scraping with `read_html` and `html_elements`:** Reads the webpage and selects all tables with the `wikitable` CSS class (a standard for tables on Wikipedia).

-   **Indexing with `.[index]`:** Extracts the specific table based on the `index` column in the `ref` table.

-   **Converting the table with `html_table`:** Converts the HTML table into a tidy dataframe.

-   **Column selection and renaming:** Cleans the scraped table by renaming and selecting only the required columns.

## Loop through all the years

The script below loops through all years in `ref$year`, applying `get_table()` to each year. The results are combined into a single dataframe (`data`).

```{r}
# Initialize an empty dataframe
data = data.frame()

# Loop through each year and scrape the corresponding data
for (i in ref$year) {
  data = rbind(data, get_table(i))
}

# Visualize data table
datatable(data, filter = "top")
 

```

## Post scraping data cleaning

### **Standardize Team Names**:

-   West Germany is relabeled as Germany for consistency.

```{r}
data <- data %>%
  mutate(Team = case_when(Team == "West Germany" ~ "Germany", TRUE ~ Team))

```

### **Filter Frequent Participants**:

-   Only keep teams that participated in at least 4 tournaments.

```{r}
teams <- data %>%
  group_by(Team) %>%
  summarise(wc = n()) %>%
  filter(wc > 3)

# Visualize teams
datatable(teams, filter = "top")
```

**Purpose**:

-   This ensures the visualization focuses on teams with a significant history in the World Cup

### Group by geographic region

```{r}

geo_group <- data.frame(
  country = c("Italy","Germany","England","Norway","Sweden","Switzerland","Netherlands","France","Belgium",
              "Spain","Croatia","Poland","Portugal","Denmark","Russia","Scotland",
              "United States","Argentina","Brazil","Paraguay","Uruguay","Costa Rica","Colombia","Chile","Mexico",
              "Nigeria","Cameroon","Saudi Arabia","South Korea","Japan","Iran","Morocco","Algeria"
  ),
  geo = c(rep("Europe",16), rep("Americas",9), rep("Other",8))
)

#Create Factor for Continent to arrange in order
geo_group$geo<-factor(geo_group$geo, levels=c("Europe","Americas","Other"))

# Visualize geo grouping table
datatable(geo_group, filter = "top")
```

The `geo_group` dataframe is created to group the countries (teams) into geographic regions (e.g., Europe, Americas, Other). These groupings will later be used to:

1.  **Color-code** teams by region.

2.  **Create section labels in the visualization** (e.g., "Europe", "Americas", "Other").

# Data wrangling and transformation

## Prepare the data for plotting

```{r}

df_plot <- data %>%
  filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
  left_join(teams, by = "Team") %>%
  left_join(geo_group, by = c("Team" = "country")) %>%
  left_join(ref, by = "year") %>%
  group_by(year) %>%
  complete(Team = teams$Team) %>%
  filter(!grepl("Eliminated", Team)) %>%
  mutate(counter = 1,
         Pos = as.integer(Pos),
         group = case_when(
           is.na(Pos) ~ "Not Present",
           Pos == 1 ~ "Win",
           Pos <= 4 ~ "Semi Finals",
           Pos <= 8 ~ "Quarter Finals",
           Pos <= 16 ~ "Round of 16",
           Pos <= 32 ~ "Group Stage"
         )) %>%
  ungroup() %>%
  group_by(Team) %>%
  arrange(Team, year) %>%
  mutate(wc = sum(counter[group != "Not Present"]),
         win = sum(counter[group == "Win"])) %>%
  arrange(geo, -wc, -win, Team) %>%
  ungroup()

# Visualize
datatable(df_plot, filter = "top")
```

### Detailed explanation of the above code snippet for df_plot

#### Filter Relevant Data

```{r}

# filter(!grepl("Eliminated", Pos) & Team %in% teams$Team)

```

**Purpose**: Exclude irrelevant rows from the data.

-   `!grepl("Eliminated", Pos)`: Removes rows where the position (`Pos`) contains the word "Eliminated".

-   `Team %in% teams$Team`: Keeps only teams that participated in more than 3 tournaments (filtered earlier in `teams`).

#### Join Additional Data

```{r}

# left_join(teams, by = "Team") %>%
# left_join(geo_group, by = c("Team" = "country")) %>%
# left_join(ref, by = "year")

```

**Purpose**: Merge additional information into the main dataframe.

-   `teams`: Adds the number of World Cups each team participated in (`wc`).

-   `geo_group`: Adds geographic groupings (e.g., Europe, Americas).

-   `ref`: Adds metadata like the tournament's host country and year.

#### Group and Ensure All Teams Appear Each Year

```{r}
# group_by(year) %>% complete(Team = teams$Team)

```

**Purpose**: Ensure every team that meets the criteria (`teams$Team`) is listed for every tournament year, even if they didn't participate.

-   `complete(Team = teams$Team)`: Adds missing rows for teams not present in certain years, filling them with `NA`.

#### Filter Out Invalid Teams

```{r}

# filter(!grepl("Eliminated", Team))

```

**Purpose**: Removes any false rows where `Team` is incorrectly filled with "Eliminated" or similar.

#### Add New Columns

```{r}

# mutate(counter = 1,
       #Pos = as.integer(Pos),
       #group = case_when(
         #is.na(Pos) ~ "Not Present",
         #Pos == 1 ~ "Win",
         #Pos <= 4 ~ "Semi Finals",
         #Pos <= 8 ~ "Quarter Finals",
         #Pos <= 16 ~ "Round of 16",
         #Pos <= 32 ~ "Group Stage"
       #))

```

**Purpose**: Create additional columns for further analysis and visualization.

-   `counter = 1`: Adds a simple counter for each row, used to calculate summaries later.

-   `Pos = as.integer(Pos)`: Converts `Pos` to an integer for easier comparisons.

-   `group`: Categorizes teams into performance groups:

    -   `is.na(Pos)`: If `Pos` is `NA`, the team did not participate (`"Not Present"`).

    -   `Pos == 1`: Winner (`"Win"`).

    -   `Pos <= 4`: Reached the semifinals (`"Semi Finals"`).

    -   `Pos <= 8`: Reached the quarterfinals (`"Quarter Finals"`).

    -   `Pos <= 16`: Reached the round of 16 (`"Round of 16"`).

    -   `Pos <= 32`: Played in the group stage (`"Group Stage"`).

#### Summarize Performance by Team

```{r}

# group_by(Team) %>%
# arrange(Team, year) %>%
# mutate(wc = sum(counter[group != "Not Present"]),
       # win = sum(counter[group == "Win"]))

```

**Purpose**: Calculate aggregate statistics for each team.

-   `wc`: Total number of tournaments the team participated in (excludes `"Not Present"` years).

-   `win`: Total number of tournaments won by the team.

#### Sort Data

```{r}

# arrange(geo, -wc, -win, Team)

```

**Purpose**: Organize the dataset for visualization.

-   `geo`: Groups teams by geographic region (Europe, Americas, Other).

-   `-wc`: Within each group, sort teams by the number of tournaments participated in, in descending order.

-   `-win`: Further sort teams by the number of wins, in descending order.

-   `Team`: Finally, sort alphabetically by team name.

#### Ungroup

```{r}

# ungroup()

```

**Purpose**: Remove grouping structure so that subsequent operations can work on the entire dataframe

## Pre-visualization positioning of teams on y-axis and assigning accessible color palettes, plus other adjustments

### Create Unique Y Positions

```{r}

df_pos <- df_plot |> 
  distinct(Team) |> 
  mutate(y_pos = row_number())

datatable(df_pos, filter = "top")
```

#### What This Does:

-   **`distinct(Team)`**:

    -   Extracts a unique list of all teams from the `df_plot` dataframe.

    -   This ensures that each team appears only once in the resulting `df_pos` dataframe.

-   **`mutate(y_pos = row_number())`**:

    -   Assigns a unique numeric value (`row_number()`) to each team. This value will determine the team's vertical position (`y_pos`) on the heatmap.

### Merge the Y Positions Back to the Main Dataset

```{r}

df_plot <- df_plot |> 
  left_join(df_pos, by = "Team")

datatable(df_plot, filter = "top")
```

#### What This Does:

-   **`left_join(df_pos, by = "Team")`**:

    -   Combines the `df_pos` dataframe (which contains the unique `y_pos` values) back into the original `df_plot` dataframe.

    -   For each row in `df_plot`, it looks up the corresponding `y_pos` based on the `Team` column and adds it.

#### Why This Is Needed:

-   This step ensures that every row in `df_plot` (which contains multiple entries per team for each World Cup year) now includes the `y_pos` value to determine its vertical position in the heatmap.

### Adjust Y Positions for Spacing Between Geographic Groups

```{r}

df_plot$y_pos <- ifelse(df_plot$y_pos < 16, df_plot$y_pos, df_plot$y_pos + 1)
df_plot$y_pos <- ifelse(df_plot$y_pos < 26, df_plot$y_pos, df_plot$y_pos + 1)

```

#### What This Does:

-   Adds blank space between different geographic regions (e.g., Europe, Americas, Other) in the heatmap.

-   **How It Works**:

    -   `ifelse(condition, value_if_true, value_if_false)` checks a condition and applies the appropriate value for each row.

    -   The logic:

        -   If `y_pos < 16`, leave it unchanged (`df_plot$y_pos` remains the same).

        -   Otherwise, increase the `y_pos` value by 1.

        -   Repeat the process for `y_pos < 26` to introduce additional spacing.

#### Why This Is Needed:

-   Creates visual separation between teams from different geographic groups in the heatmap.

### Create a Factor for Achievement Groups

```{r}

df_plot$group <- factor(df_plot$group, 
                        levels = c("Not Present", "Group Stage", "Round of 16", "Quarter Finals", "Semi Finals", "Win"))

```

#### What This Does:

-   Converts the `group` column (team performance categories) into an **ordered factor** with the specified levels.

#### Why This Is Needed:

-   Factors in R allow you to define the order of categories explicitly.

-   By ordering the levels, the heatmap will display the groups (e.g., "Not Present", "Group Stage") in a consistent order, instead of defaulting to alphabetical order.

#### Levels Explanation:

The performance levels are arranged from lowest to highest:

1.  `"Not Present"`: Team did not participate.

2.  `"Group Stage"`: Team was eliminated in the group stage.

3.  `"Round of 16"`: Team reached the round of 16.

4.  `"Quarter Finals"`: Team reached the quarterfinals.

5.  `"Semi Finals"`: Team reached the semifinals.

6.  `"Win"`: Team won the tournament.

### Define a Color Palette

```{r}

pal <- viridis(n = 5, option = "viridis")[1:5]

```

#### What This Does:

-   **`viridis(n = 5, option = "viridis")`**:

    -   Generates a set of 5 colors using the `viridis` color palette, which is known for being visually appealing and colorblind-friendly.

    -   The colors are used to represent different achievement levels in the heatmap.

-   **`[1:5]`**:

    -   Selects the first 5 colors from the palette.

#### Why This Is Needed:

-   The `pal` object will be used later in the `scale_fill_manual()` function to map performance groups to specific colors.

### Manually Adjust for 2002 (South Korea and Japan Hosting)

```{r}
df_plot$host[df_plot$Team == "Japan" & df_plot$year == 2002] <- "Japan"

```

#### What This Does:

-   **Purpose**: Corrects the `host` column for the year 2002, where both South Korea and Japan co-hosted the tournament.

-   **Logic**:

    -   Filters rows where `Team == "Japan"` and `year == 2002`.

    -   Sets the `host` value for those rows to `"Japan"`.

#### Why This Is Needed:

-   In 2002, South Korea and Japan were co-hosts, which is unusual for the World Cup. By default, the data may have assigned hosting to South Korea only, so this step ensures that Japan is also correctly marked as a host.

# Create the heatmap and polish it

```{r}

plot <- ggplot(data = df_plot, mapping = aes(x = as.character(year), y = y_pos, fill = group)) +
  geom_tile(color = "white", width = 0.9, height = 0.9) +
  geom_point(inherit.aes = FALSE, 
             data = df_plot %>% filter(Team == host), 
             mapping = aes(x = as.character(year), y = y_pos), 
             shape = 21, fill = "white", color = "grey20", size = 3) +
  annotate(geom = "text", x = "2006", y = -0.5, label = "Hosted", family = "Roboto", size = 2.75) +
  geom_segment(mapping = aes(x = "2006", xend = "2006", y = -0.1, yend = 0.85), 
               linewidth = 0.1, arrow = arrow(length = unit(0.05, "in"))) +
  geom_text(mapping = aes(label = Team, y = y_pos, x = -5), size = 3, hjust = 0, color = "#909090", family = "Roboto") +
  geomtextpath::geom_textsegment(mapping = aes(label = "Europe", x = -6, xend = -6, y = 15, yend = 1), family = "Roboto", fontface = "bold") +
  geomtextpath::geom_textsegment(mapping = aes(label = "Americas", x = -6, xend = -6, y = 25, yend = 17), family = "Roboto", fontface = "bold") +
  geomtextpath::geom_textsegment(mapping = aes(label = "Other", x = -6, xend = -6, y = 36, yend = 27), family = "Roboto", fontface = "bold") +
  scale_x_discrete(breaks = as.character(unique(df_plot$year)), 
                   expand = expansion(mult = c(1.5, 0.1), add = c(1, 1))) +
  scale_y_reverse(breaks = seq(0, 36, by = 1), limits = c(37.2, -2), expand = c(0, 0)) +
  scale_fill_manual(values = c("grey90", pal), 
                    guide = guide_legend(ncol = 1, override.aes = list(width = 0.6, height = 0.6))) +
  coord_equal() +
  labs(x = "", y = "", fill = "Top Achievement") +
  theme_void() +
  theme(text = element_text(family = "Roboto"),
        plot.title = element_text(face = "bold"),
        legend.position = "none",
        legend.title = element_text(size = 8),
        legend.text = element_text(size = 6),
        axis.text.y = element_blank(),
        axis.text.x = element_text(size = 8, angle = 90, family = "Roboto"),
        axis.ticks = element_blank(),
        panel.background = element_blank())
plot
```

The code above creates an initial heatmap that looks almost fully baked, but needs a few more tweaks.

## Detailed Heatmap plot explanation

Before we do the additional tweaking, lets walkthrough what each chunk of code above is doing - layer by layer.

### Initial Plot

```{r}

# ggplot(data = df_plot, mapping = aes(x = as.character(year), y = y_pos, fill = group))

```

-   **Purpose**: Sets up the base layer of the plot.

    -   **`data = df_plot`**: Uses the pre-processed dataset **`df_plot`** for plotting.

    -   **`aes(x = as.character(year), y = y_pos, fill = group)`**: Maps the following:

        -   **`x`**: Years of the FIFA tournaments (converted to character to ensure proper categorical spacing).

        -   **`y`**: Vertical position of each team (**`y_pos`**), which was calculated earlier to ensure unique spacing.

        -   **`fill`**: The performance group of the team (e.g., "Win", "Quarter Finals").

### Add Heatmap Tiles

```{r}

# geom_tile(color = "white", width = 0.9, height = 0.9)

```

-   **Purpose**: Creates the heatmap by drawing tiles.

    -   **`color = "white"`**: Sets the border color of each tile.

    -   **`width = 0.9, height = 0.9`**: Controls the size of each tile (slightly smaller than full size to leave spacing between tiles).

### Add Points for Host Countries

```{r}
# geom_point(inherit.aes = FALSE, 
           # data = df_plot %>% filter(Team == host), 
           # mapping = aes(x = as.character(year), y = y_pos), 
           # shape = 21, fill = "white", color = "grey20", size = 3)

```

-   **Purpose**: Adds circular points to indicate the host country for each year.

    -   **`inherit.aes = FALSE`**: Prevents this layer from inheriting the default aesthetics from **`ggplot`**.

    -   **`data = df_plot %>% filter(Team == host)`**: Filters the data to only include the host teams for each year.

    -   **`aes(x = as.character(year), y = y_pos)`**: Places the points in the corresponding year and **`y_pos`** of the host country.

    -   **`shape = 21`**: Creates a circular shape.

    -   **`fill = "white"`** and **`color = "grey20"`**: Makes the circle white with a dark grey outline.

    -   **`size = 3`**: Sets the size of the points.

### Annotated Host Text

```{r}
# annotate(geom = "text", x = "2006", y = -0.5, label = "Hosted", family = "Roboto", size = 2.75)

```

-   **Purpose**: Adds the "Hosted" label to the plot.

    -   **`geom = "text"`**: Specifies that the annotation is text.

    -   **`x = "2006", y = -0.5`**: Places the text below the 2006 column.

    -   **`label = "Hosted"`**: Specifies the text to display.

    -   **`family = "Roboto"`**: Sets the font family for the text.

    -   **`size = 2.75`**: Adjusts the font size.

### Add an arrow

```{r warning=FALSE, message=FALSE}
# geom_segment(mapping = aes(x = "2006", xend = "2006", y = -0.1, yend = 0.85), 
             #linewidth = 0.1, arrow = arrow(length = unit(0.05, "in")))

```

-   **Purpose**: Adds a vertical arrow pointing to the "Hosted" annotation.

    -   **`x = "2006", xend = "2006"`**: Starts and ends at the 2006 column.

    -   **`y = -0.1, yend = 0.85`**: Specifies the start and end positions of the arrow.

    -   **`size = 0.1`**: Sets the thickness of the arrow.

    -   **`arrow = arrow(...)`**: Draws the arrowhead.

### Add Team names

```{r}
# geom_text(mapping = aes(label = Team, y = y_pos, x = -5), size = 3, hjust = 0, color = "#909090", family = "Roboto")

```

**Purpose**: Displays team names on the y-axis.

-   **`label = Team`**: Specifies the text (team names) to display.

-   **`y = y_pos, x = -5`**: Positions the text at the corresponding **`y_pos`**, with some spacing on the left.

-   **`size = 3`**: Sets the font size.

-   **`hjust = 0`**: Left-aligns the text.

-   **`color = "#909090"`**: Sets the text color to grey.

-   **`family = "Roboto"`**: Uses the Roboto font.

### Add Geographic Group Labels

```{r}
# geomtextpath::geom_textsegment(mapping = aes(label = "Europe", x = -6, xend = -6, y = 15, yend = 1), family = "Roboto", fontface = "bold")

```

**Purpose**: Adds labels for geographic groupings (e.g., "Europe", "Americas").

-   **`geomtextpath::geom_textsegment`**: Creates a text label along a line.

-   **`label = "Europe"`**: Specifies the text for the label.

-   **`x = -6, xend = -6, y = 15, yend = 1`**: Positions the line vertically to cover the region.

-   **`family = "Roboto"`**: Sets the font family.

-   **`fontface = "bold"`**: Makes the text bold

### Customize scales

```{r}

# scale_x_discrete(breaks = as.character(unique(df_plot$year)), expand = expansion(mult = c(1.5, 0.1), add = c(1, 1)))
# scale_y_reverse(breaks = seq(0, 36, by = 1), limits = c(37.2, -2), expand = c(0, 0))

```

-   **Purpose**: Adjusts the x-axis and y-axis scales.

    -   **`scale_x_discrete`**: Ensures proper spacing for the years on the x-axis.

    -   **`scale_y_reverse`**: Reverses the y-axis so higher numbers are at the bottom.

    -   **`expand`**: Adds extra space around the plot for better alignment.

### Customize fill colors

```{r}

# scale_fill_manual(values = c("grey90", pal), guide = guide_legend(ncol = 1, override.aes = list(width = 0.6, height = 0.6)))

```

-   **Purpose**: Maps colors to performance groups and customizes the legend.

    -   **`values = c("grey90", pal)`**: Specifies the color palette (**`pal`** is predefined earlier).

    -   **`guide`**: Adjusts the legend display (e.g., one column layout).

### Apply themes

```{r}
# theme_void() +
# theme(text = element_text(family = "Roboto"),
      # plot.title = element_text(face = "bold"),
      # legend.position = "none",
      # axis.text.x = element_text(size = 8, angle = 90, family = "Roboto"),
      # axis.text.y = element_blank(),
      # axis.ticks = element_blank(),
      # panel.background = element_blank())

```

-   **Purpose**: Removes unnecessary elements and applies styling.

    -   **`theme_void()`**: Removes all default plot elements (gridlines, axes, etc.).

    -   **`text = element_text(family = "Roboto")`**: Sets the default font.

    -   **`legend.position = "none"`**: Hides the legend.

    -   **`axis.text.x`**: Displays x-axis labels rotated vertically.

    -   **`axis.text.y`**, **`axis.ticks`**: Hides the y-axis labels and ticks.

# Add text and annotations

## Create text

```{r}

#create title text - used with ggtext::geom_textbox

fifa_text<- "The FIFA World Cup, started in 1930, is an international football competition that takes place every four years. The analysis looks at the span of FIFA competitions between 1978 and 2018, tracking teams that participated in a minimum of 4 tournaments."

fifa_text2<-"It is important to note that the format of the competition and number of teams admitted has changed over time. In 1982, a total of 24 teams participated, and in subsequent tournaments, FIFA expanded the tournament to admit 32 teams. The Round of 16 was not introduced until 1986 - to standardize comparison, teams that achieved a ranking of at least 16 in competitions before 1986 were grouped as Round of 16. "

fifa_text3<-"Graphic groups teams by geographic location. The other grouping combines teams from Asia, Africa, and Australia. Between 1950 and 1990, Germany competed as two entities, West Germany and East Germany (result of the 1945 division). East Germany participated once in 1974. To standardize analysis, West Germany is relabeled as Germany for both 1982 and 1990 tournaments."
```

## Create a custom legend

```{r}

#create df for custom legend (positions relative to new plot creating in next step)
df_legend<-data.frame(x= rep(seq(3.38, 5, by=.6),2),
                      y= c(rep(2.1, 3),rep(1.95,3)),
                      label=c("Not Present","Group Stage", "Round of 16","Quarter Finals","Semi Finals","Winner"),
                      color = c("grey90",pal))
```

### **Purpose of the `df_legend` Dataframe**

The **`df_legend`** dataframe is created to define the **positions, labels, and colors** for the custom legend displayed in the plot.

Each row in **`df_legend`** corresponds to a legend item:

-   **`x`** and **`y`**: The position of the legend items on the plot.

-   **`label`**: The name of each performance category (e.g., "Not Present", "Group Stage").

-   **`color`**: The corresponding color for each performance category (e.g., grey for "Not Present").

This custom legend is manually positioned and styled to fit seamlessly into the visualization.

### **Breakdown of the Code**

#### **a. `x` Column**

```{r}
# x = rep(seq(3.38, 5, by = 0.6), 2)

```

-   **Purpose**: Specifies the x-coordinates (horizontal positions) for the legend items.

-   **How It Works**:

    -   **`seq(3.38, 5, by = 0.6)`**: Generates a sequence of numbers starting at 3.38, ending at 5, with a step size of 0.6. This creates positions for the first 3 legend items

    ```{r}
    # seq(3.38, 5, by = 0.6)
    # Output: [3.38, 3.98, 4.58]

    ```

-   `rep(..., 2)`: Repeats the sequence twice, one for each row of labels (the first 3 items go in the first row, and the next 3 items go in the second row).

    ```{r}
    # rep(seq(3.38, 5, by = 0.6), 2)
    # Output: [3.38, 3.98, 4.58, 3.38, 3.98, 4.58]

    ```

## Helper function to make image transparent

```{r}

#Adding alpha function to geom_image

#solution from: https://stackoverflow.com/questions/60820565/is-there-a-way-to-add-an-alpha-value-within-geom-image-in-ggplot
transparent <- function(img) {
  magick::image_fx(img, expression = "0.1*a", channel = "alpha")
}
```

### **Context**

The purpose of this code chunk is to create a custom function, **`transparent`**, that applies transparency (alpha) to an image used in a ggplot visualization. The image will later be added to the plot using **`geom_image`**.

### **Code Breakdown**

#### **a. Define the Function**

```{r}
#transparent <- function(img) {
  #magick::image_fx(img, expression = "0.1*a", channel = "alpha")
#}

```

**What This Does:**

1.  **`magick::image_fx`**:

    -   Part of the **`magick`** package, which provides tools for manipulating images in R.

    -   The **`image_fx`** function applies pixel-wise operations on an image.

2.  **Parameters of `image_fx`**:

    -   **`img`**: The input image, typically loaded into R from a file or URL.

    -   **`expression = "0.1*a"`**:

        -   Specifies the mathematical operation to apply to each pixel.

        -   **`a`** stands for the alpha (transparency) channel of the image.

        -   **`"0.1*a"`** multiplies the current alpha value by **`0.1`**, making the image 10% opaque (90% transparent).

    -   **`channel = "alpha"`**:

        -   Targets the alpha channel, which controls the transparency of the image

#### **b. Why This Function is Needed**

By default, **`geom_image`** from the **`ggimage`** package does not support setting an alpha value directly on the image. This function preprocesses the image to make it transparent before passing it to **`geom_image`**.

## The code to add the text and annotations

```{r}
title <- paste0(
  "<span style='font-family:Cocon;font-size:28pt;'>**FIFA WORLD CUP**</span><br><br>",
  "<span style='font-face:CA;font-size:11pt;color:#545454;'>", fifa_text, "</span><br><br>",
  "<span style='font-face:Roboto;font-size:11pt;color:#545454;'>", fifa_text2, "</span><br><br>",
  "<span style='font-face:Roboto;font-size:11pt;color:#545454;'>", fifa_text3, "</span>"
)

caption <- paste0(
  "<span style='font-family:Roboto;padding-right:10px;'>Source: Wikipedia</span>",
  "<span style='color:#ffffff;'>.....</span>",
  "<span style='font-family:fb;'>&#xf099;</span>",
  "<span style='font-family:Roboto;'>@tanya_shapiro</span>",
  "<span style='color:#ffffff;'>...</span>",
  "<span style='font-family:fb;'>&#xf09b;</span>",
  "<span style='font-family:Roboto;'> tashapiro </span>"
)


```

-   **Purpose**: Constructs the styled text for the title and caption.

    -   **`paste0`**: Combines strings to form the final HTML-styled title.

    -   HTML-like styling is used:

        -   **`<span style='font-family:Cocon;font-size:28pt;'>`**: Sets the font family to "Cocon" and font size to 28pt for the main title.

        -   **`<br><br>`**: Inserts line breaks to space out sections.

        -   **`fifa_text`**, **`fifa_text2`**, **`fifa_text3`**: Includes descriptive text about the visualization.

        -   **`Source: Wikipedia`**: Attribution for the data source.

        -   **`<span style='color:#ffffff;'>.....</span>`**: Adds invisible spacing (white dots).

        -   **`&#xf099;`**: Unicode character for a Twitter icon (using Font Awesome).

        -   **`@tanya_shapiro`**: The creator's Twitter handle.

        -   **`&#xf09b;`**: Unicode character for a GitHub icon.

        -   **`tashapiro`**: The creator's GitHub handle.

## Final plot

```{r warning=FALSE, message=FALSE}
#Final Plot (note: positioning of layers was very experimental, hindsight would set scales from 0 to n)
ggplot()+
  #add in tile heatmap
  annotation_custom(ggplotGrob(plot), xmin=3, xmax=8.5, ymin=1.25, ymax=4.75)+
  #add ball image 
  geom_image(mapping=aes(x=3.3, y=4.5, image="./assets/ball.png"), image_fun = transparent, size=.4)+
  #add plot title
  geom_textbox(mapping=aes(x=3.3, y=4.5, label=title), hjust=0, vjust=1, box.size=NA, fill=NA,  width = unit(4, "inch"))+
  #add caption
  geom_textbox(mapping=aes(x=3.3, y=1.25, label=caption), size=3, color="#6E6E6E", hjust=0, vjust=1, box.size=NA, fill=NA,  width = unit(3.5, "inch"))+
  #add custom legend
  geom_text(mapping=aes(x=3.35, y=2.25, label="Best Achievement"), hjust=0, family="Roboto", fontface="bold")+
  geom_text(data=df_legend, mapping=aes(x=x+.08, y=y, label=label), hjust=0, family="Roboto", size=3.5)+
  geom_point(data=df_legend, mapping=aes(x=x, y=y, color=I(color)), shape=15, size=6)+
  scale_x_continuous(limits=c(3,7), expand=c(0,0))+
  scale_y_continuous(limits=c(1,5), expand=c(0,0))+
  coord_equal()+
  theme_void()

```

### Explaining some of the above final good chunks

#### Add in heatmap

```{r}

# annotation_custom(ggplotGrob(plot), xmin = 3, xmax = 8.5, ymin = 1.25, ymax = 4.75)

```

The purpose of this code is toÂ **embed a heatmap (stored asÂ `plot`) within a larger ggplot visualization**. TheÂ `annotation_custom()`Â function is used to place the pre-created heatmap in a specific area of the overall plot.

##### **i. `annotation_custom()`**

-   Adds a **custom annotation layer** to the ggplot. It can include any grob (graphical object) and allows precise control over its placement.

##### **ii. `ggplotGrob(plot)`**

-   Converts the **`plot`** object (a ggplot heatmap created earlier in the script) into a **grob** (graphical object). This conversion is necessary because **`annotation_custom()`** works with grobs rather than ggplot objects.

#### Add title to the plot

```{r}

#geom_textbox(mapping = aes(x = 3.3, y = 4.5, label = title),
             #hjust = 0, vjust = 1, box.size = NA, fill = NA, width = unit(4, "inch"))

```

**Purpose**: Adds the styled title text to the plot.

-   **`x = 3.3, y = 4.5`**: Positions the title text.

-   **`label = title`**: Specifies the title text to display.

-   **`hjust = 0`**: Left-aligns the text.

-   **`vjust = 1`**: Vertically aligns the top of the text box with **`y = 4.5`**.

-   **`box.size = NA, fill = NA`**: Removes the text box border and background.

-   **`width = unit(4, "inch")`**: Limits the width of the text to 4 inches.

#### Add caption to the plot

```{r}
# geom_textbox(mapping = aes(x = 3.3, y = 1.25, label = caption),
             # size = 3, color = "#6E6E6E", hjust = 0, vjust = 1, box.size = NA, fill = NA, width = unit(3.5, "inch"))

```

**Purpose**: Adds the caption text at the bottom of the plot.

-   **`x = 3.3, y = 1.25`**: Positions the caption.

-   **`label = caption`**: Specifies the caption text to display.

-   **`size = 3`**: Sets the font size.

-   **`color = "#6E6E6E"`**: Sets the text color to grey.

-   **`hjust = 0, vjust = 1`**: Aligns the text box to the left and top of the specified position.

-   **`width = unit(3.5, "inch")`**: Restricts the width of the text to 3.5 inches.

#### Add legend title

```{r}
# geom_text(mapping = aes(x = 3.35, y = 2.25, label = "Best Achievement"),
          # hjust = 0, family = "Roboto", fontface = "bold")

```

-   **Purpose**: Adds the legend title ("Best Achievement").

    -   **`x = 3.35, y = 2.25`**: Positions the legend title.

    -   **`label = "Best Achievement"`**: Specifies the text to display.

    -   **`hjust = 0`**: Left-aligns the text.

    -   **`family = "Roboto"`**: Sets the font family to Roboto.

    -   **`fontface = "bold"`**: Makes the text bold.

#### Add legend Items

```{r}

# geom_text(data = df_legend, mapping = aes(x = x + 0.08, y = y, label = label), hjust = 0, family = "Roboto", size = 3.5) +
# geom_point(data = df_legend, mapping = aes(x = x, y = y, color = I(color)), shape = 15, size = 6)

```

-   **Purpose**: Creates the custom legend with colored boxes and text labels.

    -   **Text Labels**:

        -   **`data = df_legend`**: Uses a separate dataframe (**`df_legend`**) for the legend items.

        -   **`x = x + 0.08, y = y`**: Adjusts the position of the labels slightly to the right of the colored boxes.

        -   **`label = label`**: Specifies the text for each legend item (e.g., "Winner", "Quarter Finals").

        -   **`hjust = 0`**: Left-aligns the text.

        -   **`family = "Roboto"`**: Sets the font family.

        -   **`size = 3.5`**: Sets the font size.

    -   **Colored Boxes**:

        -   **`aes(x = x, y = y, color = I(color))`**: Maps the **`x`**, **`y`**, and color for each legend item.

        -   **`shape = 15`**: Uses a square shape for the legend items.

        -   **`size = 6`**: Sets the size of the boxes.

## Save the final image

```{r}
#save
# ggsave("fifa_draft.png", bg="white" , height=9, width=9, units="in")
```

![Final image output](fifa_draft.png)

This final image is close enough to the original image, and we learnt alot in the process.
