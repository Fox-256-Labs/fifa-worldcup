html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
View(data)
# Step 1: Get the URL and table index for the year 1982
url = ref$link[ref$year == 1998]
index = ref$index[ref$year == 1998]
# Step 2: Scrape the table from the Wikipedia page
data = url %>%
read_html() %>%                    # Read the HTML content of the page
html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
View(data)
# Step 1: Get the URL and table index for the year 1982
url = ref$link[ref$year == 2002]
index = ref$index[ref$year == 2002]
# Step 2: Scrape the table from the Wikipedia page
data = url %>%
read_html() %>%                    # Read the HTML content of the page
html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
View(data)
# Step 1: Get the URL and table index for the year 1982
url = ref$link[ref$year == 2006]
index = ref$index[ref$year == 2006]
# Step 2: Scrape the table from the Wikipedia page
data = url %>%
read_html() %>%                    # Read the HTML content of the page
html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
View(data)
# Step 1: Get the URL and table index for the year 1982
url = ref$link[ref$year == 2010]
index = ref$index[ref$year == 2010]
# Step 2: Scrape the table from the Wikipedia page
data = url %>%
read_html() %>%                    # Read the HTML content of the page
html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
View(data)
# Step 1: Get the URL and table index for the year 1982
url = ref$link[ref$year == 2014]
index = ref$index[ref$year == 2014]
# Step 2: Scrape the table from the Wikipedia page
data = url %>%
read_html() %>%                    # Read the HTML content of the page
html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
View(data)
ref = data.frame(
year = c(1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014, 2018),
index = c(16, 14, 15, 13, 25, 24, 23, 14, 20, 20),
host = c("Spain", "Mexico", "Italy", "United States", "France",
"South Korea", "Germany", "South Africa", "Brazil", "Russia")
)
# Generate links to all Wikipedia pages for these years
ref$link = paste0("https://en.wikipedia.org/wiki/", ref$year, "_FIFA_World_Cup")
# Step 1: Get the URL and table index for the year 1982
url = ref$link[ref$year == 2014]
index = ref$index[ref$year == 2014]
# Step 2: Scrape the table from the Wikipedia page
data = url %>%
read_html() %>%                    # Read the HTML content of the page
html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
View(data)
url = ref$link[ref$year == 2018]
index = ref$index[ref$year == 2018]
# Step 2: Scrape the table from the Wikipedia page
data = url %>%
read_html() %>%                    # Read the HTML content of the page
html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
View(data)
ref = data.frame(
year = c(1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014),
index = c(16, 14, 15, 13, 25, 24, 23, 14, 20),
host = c("Spain", "Mexico", "Italy", "United States", "France",
"South Korea", "Germany", "South Africa", "Brazil")
)
# Generate links to all Wikipedia pages for these years
ref$link = paste0("https://en.wikipedia.org/wiki/", ref$year, "_FIFA_World_Cup")
get_table <- function(year) {
# Step 1: Get the URL and table index for the year
url = ref$link[ref$year == year]
index = ref$index[ref$year == year]
# Step 2: Scrape the table from the Wikipedia page
data = url %>%
read_html() %>%                    # Read the HTML content of the page
html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
# Step 3: Clean and format the table
data = data %>%
rename(Pos = 1) %>%                # Rename the first column to 'Pos' (Position)
select(Pos, Team, L, W)            # Keep only Position, Team, Losses, and Wins columns
# Step 4: Add the year column
data$year = year
return(data)
}
# Initialize an empty dataframe
data = data.frame()
# Loop through each year and scrape the corresponding data
for (i in ref$year) {
data = rbind(data, get_table(i))
}
View(data)
data <- data %>%
mutate(Team = case_when(Team == "West Germany" ~ "Germany", TRUE ~ Team))
teams <- data %>%
group_by(Team) %>%
summarise(wc = n()) %>%
filter(wc > 3)
View(teams)
teams[!grepl("Eliminated in the", teams$Team),]
teams <- teams[!grepl("Eliminated in the", teams$Team),] # Remove unwanted rows
View(teams)
data <- data[!grepl("Eliminated in the", data$Pos),] # Remove unwanted rows
View(data)
# Remove unwanted rows
data <- data[!grepl("Eliminated in the", data$Pos),] %>% na.omit()
View(data)
data <- data %>%
mutate(Team = case_when(Team == "West Germany" ~ "Germany", TRUE ~ Team))
teams <- data %>%
group_by(Team) %>%
summarise(wc = n()) %>%
filter(wc > 3)
View(teams)
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team)
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team")
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country"))
teams$Team
geo_group <- data.frame(
country = c("Italy","Germany","England","Norway","Sweden","Switzerland","Netherlands","France","Belgium",
"Spain","Croatia","Poland","Portugal","Denmark","Russia","Scotland",
"United States","Argentina","Brazil","Paraguay","Uruguay","Costa Rica","Colombia","Chile","Mexico",
"Nigeria","Cameroon","Saudi Arabia","South Korea","Japan","Iran","Morocco","Algeria"
),
geo = c(rep("Europe",16), rep("Americas",9), rep("Other",8))
)
View(geo_group)
#Create Factor for Continent to arrange in order
geo_group$geo<-factor(geo_group$geo, levels=c("Europe","Americas","Other"))
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country"))
View(ref)
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year")
?complete
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year") %>%
group_by(year) %>%
complete(Team = teams$Team)
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year") %>%
group_by(year) %>%
complete(Team = teams$Team) %>%
filter(!grepl("Eliminated", Team))
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year") %>%
group_by(year) %>%
complete(Team = teams$Team) %>%
filter(!grepl("Eliminated", Team)) %>%
mutate(counter = 1,
Pos = as.integer(Pos),
group = case_when(
is.na(Pos) ~ "Not Present",
Pos == 1 ~ "Win",
Pos <= 4 ~ "Semi Finals",
Pos <= 8 ~ "Quarter Finals",
Pos <= 16 ~ "Round of 16",
Pos <= 32 ~ "Group Stage"
))
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year") %>%
group_by(year) %>%
complete(Team = teams$Team) %>%
filter(!grepl("Eliminated", Team)) %>%
mutate(counter = 1,
Pos = as.integer(Pos),
group = case_when(
is.na(Pos) ~ "Not Present",
Pos == 1 ~ "Win",
Pos <= 4 ~ "Semi Finals",
Pos <= 8 ~ "Quarter Finals",
Pos <= 16 ~ "Round of 16",
Pos <= 32 ~ "Group Stage"
)) %>%
ungroup()
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year") %>%
group_by(year) %>%
complete(Team = teams$Team) %>%
filter(!grepl("Eliminated", Team)) %>%
mutate(counter = 1,
Pos = as.integer(Pos),
group = case_when(
is.na(Pos) ~ "Not Present",
Pos == 1 ~ "Win",
Pos <= 4 ~ "Semi Finals",
Pos <= 8 ~ "Quarter Finals",
Pos <= 16 ~ "Round of 16",
Pos <= 32 ~ "Group Stage"
)) %>%
ungroup() %>%
group_by(Team)
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year") %>%
group_by(year) %>%
complete(Team = teams$Team) %>%
filter(!grepl("Eliminated", Team)) %>%
mutate(counter = 1,
Pos = as.integer(Pos),
group = case_when(
is.na(Pos) ~ "Not Present",
Pos == 1 ~ "Win",
Pos <= 4 ~ "Semi Finals",
Pos <= 8 ~ "Quarter Finals",
Pos <= 16 ~ "Round of 16",
Pos <= 32 ~ "Group Stage"
)) %>%
ungroup() %>%
group_by(Team) %>%
arrange(Team, year)
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year") %>%
group_by(year) %>%
complete(Team = teams$Team) %>%
filter(!grepl("Eliminated", Team)) %>%
mutate(counter = 1,
Pos = as.integer(Pos),
group = case_when(
is.na(Pos) ~ "Not Present",
Pos == 1 ~ "Win",
Pos <= 4 ~ "Semi Finals",
Pos <= 8 ~ "Quarter Finals",
Pos <= 16 ~ "Round of 16",
Pos <= 32 ~ "Group Stage"
)) %>%
ungroup() %>%
group_by(Team) %>%
arrange(Team, year) %>%
mutate(wc = sum(counter[group != "Not Present"]),
win = sum(counter[group == "Win"]))
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year") %>%
group_by(year) %>%
complete(Team = teams$Team) %>%
filter(!grepl("Eliminated", Team)) %>%
mutate(counter = 1,
Pos = as.integer(Pos),
group = case_when(
is.na(Pos) ~ "Not Present",
Pos == 1 ~ "Win",
Pos <= 4 ~ "Semi Finals",
Pos <= 8 ~ "Quarter Finals",
Pos <= 16 ~ "Round of 16",
Pos <= 32 ~ "Group Stage"
)) %>%
ungroup() %>%
group_by(Team) %>%
arrange(Team, year) %>%
mutate(wc = sum(counter[group != "Not Present"]),
win = sum(counter[group == "Win"])) %>%
arrange(geo, -wc, -win, Team)
data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year") %>%
group_by(year) %>%
complete(Team = teams$Team) %>%
filter(!grepl("Eliminated", Team)) %>%
mutate(counter = 1,
Pos = as.integer(Pos),
group = case_when(
is.na(Pos) ~ "Not Present",
Pos == 1 ~ "Win",
Pos <= 4 ~ "Semi Finals",
Pos <= 8 ~ "Quarter Finals",
Pos <= 16 ~ "Round of 16",
Pos <= 32 ~ "Group Stage"
)) %>%
ungroup() %>%
group_by(Team) %>%
arrange(Team, year) %>%
mutate(wc = sum(counter[group != "Not Present"]),
win = sum(counter[group == "Win"])) %>%
arrange(geo, -wc, -win, Team) %>%
ungroup()
df_plot <- data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year") %>%
group_by(year) %>%
complete(Team = teams$Team) %>%
filter(!grepl("Eliminated", Team)) %>%
mutate(counter = 1,
Pos = as.integer(Pos),
group = case_when(
is.na(Pos) ~ "Not Present",
Pos == 1 ~ "Win",
Pos <= 4 ~ "Semi Finals",
Pos <= 8 ~ "Quarter Finals",
Pos <= 16 ~ "Round of 16",
Pos <= 32 ~ "Group Stage"
)) %>%
ungroup() %>%
group_by(Team) %>%
arrange(Team, year) %>%
mutate(wc = sum(counter[group != "Not Present"]),
win = sum(counter[group == "Win"])) %>%
arrange(geo, -wc, -win, Team) %>%
ungroup()
View(df_plot)
ggplot(data = df_plot, mapping = aes(x = as.character(year), y = y_pos, fill = group))
library(tidyverse)
library(RColorBrewer)
library(viridis)
library(sysfonts)
library(showtext)
library(geomtextpath)
library(ggimage)
library(ggtext)
library(rvest)
library(DT)
sysfonts::font_add_google("Roboto", "Roboto")
sysfonts::font_add("Cocon", "./fonts/CoconRegularFont.otf")
sysfonts::font_add("fb", "fonts/Font Awesome 6 Brands-Regular-400.otf")
showtext_auto()
showtext::showtext_opts(dpi = 300)
ref = data.frame(
year = c(1982, 1986, 1990, 1994, 1998, 2002, 2006, 2010, 2014),
index = c(16, 14, 15, 13, 25, 24, 23, 14, 20),
host = c("Spain", "Mexico", "Italy", "United States", "France",
"South Korea", "Germany", "South Africa", "Brazil")
)
# Generate links to all Wikipedia pages for these years
ref$link = paste0("https://en.wikipedia.org/wiki/", ref$year, "_FIFA_World_Cup")
# Visualize the reference table
datatable(ref, filter = "top")
# Step 1: Get the URL and table index for the year 1982
url = ref$link[ref$year == 1982]
index = ref$index[ref$year == 1982]
# Step 2: Scrape the table from the Wikipedia page
data = url %>%
read_html() %>%                    # Read the HTML content of the page
html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
# Step 3: Clean and format the table
data = data %>%
rename(Pos = 1) %>%                # Rename the first column to 'Pos' (Position)
select(Pos, Team, L, W)            # Keep only Position, Team, Losses, and Wins columns
datatable(data, filter = "top")
# Step 2: Scrape the table from the Wikipedia page
data_1982 = url %>%
read_html() %>%                    # Read the HTML content of the page
html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
# Step 3: Clean and format the table
data_1982 = data_1982 %>%
rename(Pos = 1) %>%                # Rename the first column to 'Pos' (Position)
select(Pos, Team, L, W)            # Keep only Position, Team, Losses, and Wins columns
datatable(data_1982, filter = "top")
get_table <- function(year) {
# Step 1: Get the URL and table index for the year
url = ref$link[ref$year == year]
index = ref$index[ref$year == year]
# Step 2: Scrape the table from the Wikipedia page
data = url %>%
read_html() %>%                    # Read the HTML content of the page
html_elements("table.wikitable") %>%  # Select all tables with the 'wikitable' class
.[index] %>%                       # Pick the table based on the given index
html_table() %>%                   # Convert the table to a dataframe
.[[1]]                             # Extract the first element of the list
# Step 3: Clean and format the table
data = data %>%
rename(Pos = 1) %>%                # Rename the first column to 'Pos' (Position)
select(Pos, Team, L, W)            # Keep only Position, Team, Losses, and Wins columns
# Step 4: Add the year column
data$year = year
return(data)
}
# Initialize an empty dataframe
data = data.frame()
# Loop through each year and scrape the corresponding data
for (i in ref$year) {
data = rbind(data, get_table(i))
}
# Visualize data table
datatable(data, filter = "top")
data <- data %>%
mutate(Team = case_when(Team == "West Germany" ~ "Germany", TRUE ~ Team))
teams <- data %>%
group_by(Team) %>%
summarise(wc = n()) %>%
filter(wc > 3)
# Visualize teams
datatable(teams, filter = "top")
geo_group <- data.frame(
country = c("Italy","Germany","England","Norway","Sweden","Switzerland","Netherlands","France","Belgium",
"Spain","Croatia","Poland","Portugal","Denmark","Russia","Scotland",
"United States","Argentina","Brazil","Paraguay","Uruguay","Costa Rica","Colombia","Chile","Mexico",
"Nigeria","Cameroon","Saudi Arabia","South Korea","Japan","Iran","Morocco","Algeria"
),
geo = c(rep("Europe",16), rep("Americas",9), rep("Other",8))
)
#Create Factor for Continent to arrange in order
geo_group$geo<-factor(geo_group$geo, levels=c("Europe","Americas","Other"))
# Visualize geo grouping table
datatable(geo_group, "top")
# Visualize geo grouping table
datatable(geo_group, filter = "top")
df_plot <- data %>%
filter(!grepl("Eliminated", Pos) & Team %in% teams$Team) %>%
left_join(teams, by = "Team") %>%
left_join(geo_group, by = c("Team" = "country")) %>%
left_join(ref, by = "year") %>%
group_by(year) %>%
complete(Team = teams$Team) %>%
filter(!grepl("Eliminated", Team)) %>%
mutate(counter = 1,
Pos = as.integer(Pos),
group = case_when(
is.na(Pos) ~ "Not Present",
Pos == 1 ~ "Win",
Pos <= 4 ~ "Semi Finals",
Pos <= 8 ~ "Quarter Finals",
Pos <= 16 ~ "Round of 16",
Pos <= 32 ~ "Group Stage"
)) %>%
ungroup() %>%
group_by(Team) %>%
arrange(Team, year) %>%
mutate(wc = sum(counter[group != "Not Present"]),
win = sum(counter[group == "Win"])) %>%
arrange(geo, -wc, -win, Team) %>%
ungroup()
# Visualize
datatable(df_plot, filter = "top")
df_pos <- df_plot |>
distinct(Team) |>
mutate(y_pos = row_number())
View(df_pos)
datatable(df_pos, filter = "top")
df_plot <- df_plot |>
left_join(df_pos, by = "Team")
datatable(df_plot, filter = "top")
View(df_plot)
df_plot$y_pos <- ifelse(df_plot$y_pos < 16, df_plot$y_pos, df_plot$y_pos + 1)
df_plot$y_pos <- ifelse(df_plot$y_pos < 26, df_plot$y_pos, df_plot$y_pos + 1)
df_plot$group <- factor(df_plot$group,
levels = c("Not Present", "Group Stage", "Round of 16", "Quarter Finals", "Semi Finals", "Win"))
pal <- viridis(n = 5, option = "viridis")[1:5]
df_plot$host[df_plot$Team == "Japan" & df_plot$year == 2002] <- "Japan"
